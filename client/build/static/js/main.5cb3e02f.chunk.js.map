{"version":3,"sources":["DataTable.js","ProductForm.js","App.js","serviceWorker.js","index.js"],"names":["DataTable","useState","orders","setOrders","setPerformed","num","a","data","id","console","log","fetch","method","headers","body","JSON","stringify","response","json","result","alert","message","useEffect","map","elem","index","status","key","className","address","item","size","phone","onClick","getData","ProductForm","state","title","price","sex","mainPhoto","secPhoto","thiPhoto","description","category","color","sizes","handleSubmit","bind","myChangeHandler","event","preventDefault","this","brand","setState","nam","target","name","val","value","onSubmit","class","type","onChange","React","Component","App","statement","setStatement","placeholder","onInput","document","getElementById","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.5cb3e02f.chunk.js","sourcesContent":["import React from 'react'\nimport { useState,useEffect } from 'react'\n\n\nexport const DataTable = () => {\n\tconst [orders, setOrders] = useState(null)\n\n\tconst setPerformed = async (num) => {\n\t\tlet data = {id: num}\n\t\tconsole.log(data)\n\t\tconst response = await fetch('/statusSetter', {method:'POST', headers: {'Content-Type': 'application/json;charset=utf-8'}, body: JSON.stringify(data)})\n\t\tconst result = await response.json();\n\t\talert(result.message);\n\t}\n\n\tuseEffect( () => {\n\t\tconst getData = async () => {\n\t\t\tconst response = await fetch('/orders', {method:\"GET\"})\n\t\t\tconst data = await response.json()\n\t\t\tconst body = data.map((elem, index) => {\n\t\t\t\tif (elem.status == \"1\") {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div key={index} className=\"row\">\n\t\t\t\t\t\t\t<span className=\"order-id\">{elem.num}</span>\n\t\t\t\t\t\t\t<span className=\"order-address\">{elem.address}</span>\n\t\t\t\t\t\t\t<span className=\"order-name\">{elem.item}</span>\n\t\t\t\t\t\t\t<span className=\"order-size\">{elem.size}</span>\n\t\t\t\t\t\t\t<span className=\"order-phone\">{elem.phone}</span>\n\t\t\t\t\t\t\t<button onClick={() => {setPerformed(elem.num)} }>Выполнен</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t})\n\t\t\tsetOrders(body)\n\t\t}\n\t\tgetData()\n\t}, [])\n\n\treturn ( \n\t\t<div>\n\t\t \t<div id=\"table\">\n\t\t \t\t{orders}\n\t\t \t</div>\t\n\t\t</div>\n\t)\n}\n","import React, {useState} from 'react'\n\nexport class ProductForm extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\ttitle: '',\n\t\t\tprice: '',\n\t\t\tsex: '',\n\t\t\tmainPhoto: '',\n\t\t\tsecPhoto: '',\n\t\t\tthiPhoto: '',\n\t\t\tdescription: '',\n\t\t\tcategory: '',\n\t\t\tcolor: '',\n\t\t\tsizes:''\n\t\t}\n\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t\tthis.myChangeHandler = this.myChangeHandler.bind(this)\n\t}\n\t\n\thandleSubmit(event) {\n\t\tevent.preventDefault()\n\t\tlet data = {\n\t\t\tid: this.state.id,\n\t\t\ttitle: this.state.title,\n\t\t\tprice: this.state.price,\n\t\t\tsex: this.state.sex,\n\t\t\tmainPhoto: this.state.mainPhoto,\n\t\t\tsecPhoto: this.state.secPhoto,\n\t\t\tthiPhoto: this.state.thiPhoto,\n\t\t\tdescription: this.state.description,\n\t\t\tcategory: this.state.category,\n\t\t\tsizes: this.state.sizes,\n\t\t\tcolor: this.state.color,\n\t\t\tbrand: this.state.brand\n\t\t}\n\n\t\tfetch('/addNewProduct', {method:'POST', headers: {'Content-Type': 'application/json;charset=utf-8'}, body: JSON.stringify(data)})\n\n\t\tthis.setState({\n\t\t\tid: '',\t\t\t\n\t\t\ttitle: '',\n\t\t\tprice: '',\n\t\t\tsex: '',\n\t\t\tmainPhoto: '',\n\t\t\tsecPhoto: '',\n\t\t\tthiPhoto: '',\n\t\t\tdescription: '',\n\t\t\tcolor: '',\n\t\t\tsizes: '',\n\t\t\tcategory: '',\n\t\t\tbrand: ''\n\t\t})\n\t}\n\t\n\tmyChangeHandler(event) {\n\t    let nam = event.target.name;\n\t    let val = event.target.value;\n\t    this.setState({[nam]: val});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t\t<div class=\"rows\">\n\t\t\t\t\t<label>ID товара</label><br />\n\t\t\t\t\t<input type='text' name=\"id\" onChange={this.myChangeHandler} value={this.state.id}/>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"rows\">\n\t\t\t\t\t<label>Наименование товара</label><br />\n\t\t\t\t\t<input type='text' name=\"title\" onChange={this.myChangeHandler} value={this.state.title}/>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"rows\">\n\t\t\t\t\t<label>Цена</label><br />\n\t\t\t\t\t<input type='text' name=\"price\" onChange={this.myChangeHandler} value={this.state.price}/>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"rows\">\n\t\t\t\t\t<label>Цвет</label><br />\n\t\t\t\t\t<input type='text' name=\"color\" onChange={this.myChangeHandler} value={this.state.color}/>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"rows\">\n\t\t\t\t\t<label>Размер</label><br />\n\t\t\t\t\t<input type='text' name=\"sizes\" onChange={this.myChangeHandler} value={this.state.sizes}/>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"rows\">\n\t\t\t\t\t<label>Категория</label><br />\n\t\t\t\t\t<input type='text' name=\"category\" onChange={this.myChangeHandler} value={this.state.category}/>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"rows\">\n\t\t\t\t\t<label>Бренд</label><br />\n\t\t\t\t\t<input type='text' name=\"brand\" onChange={this.myChangeHandler} value={this.state.brand}/>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"rows\">\n\t\t\t\t\t<label>Пол</label><br /> \n\t\t\t\t\t<input type='text' name=\"sex\" onChange={this.myChangeHandler} value={this.state.sex}/>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"rows\">\n\t\t\t\t\t<label>Ссылка на заглавное фото</label><br />\n\t\t\t\t\t<input type='text' name=\"mainPhoto\" onChange={this.myChangeHandler} value={this.state.mainPhoto}/>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"rows\">\n\t\t\t\t\t<label>Фото №2</label><br />\n\t\t\t\t\t<input type='text' name=\"secPhoto\" onChange={this.myChangeHandler} value={this.state.secPhoto}/>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"rows\">\n\t\t\t\t\t<label>Фото №3</label><br />\n\t\t\t\t\t<input type='text' name=\"thiPhoto\" onChange={this.myChangeHandler} value={this.state.thiPhoto}/>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"rows\">\n\t\t\t\t\t<label>Описание</label><br />\n\t\t\t\t\t<textarea class=\"highInput\" name=\"description\" onChange={this.myChangeHandler} value={this.state.description}> </textarea>\n\t\t\t\t</div>\n\t\t\t\t<input type=\"submit\" value=\"Добавить\" class=\"button\" />\n\t\t\t</form>\n\t\t)\n\t}\n}\n","import React, {useState} from 'react'\nimport {DataTable} from './DataTable'\nimport {ProductForm} from './ProductForm'\n\nfunction App() {\n  const [statement, setStatement] = useState('')\n\n  function checkWord () {  \n    if ((document.getElementById('form-control').value === 'Vision') || (document.getElementById('form-control').value === 'vision'))\n      { setStatement('Vision') } \n    if ((document.getElementById('form-control').value === 'Product') || (document.getElementById('form-control').value === 'product'))\n      { setStatement('Product') }\n  }\n\n  if (statement === 'Vision') {\n    return (\n      <div id=\"main-wrapper\">\n        <header>Arcade.Clothes</header>\n        \n        <div id=\"content\">\n          <ul>\n            <DataTable />\n          </ul>\n        </div>\n      </div>\n    )\n  } else if (statement === 'Product') {\n    return (\n      <div id=\"main-wrapper\">\n        <header>Arcade.Clothes</header>\n        \n        <div id=\"content\">\n          <ul>\n            <ProductForm />\n          </ul>\n        </div>\n      </div>\n    )\n  } else {\n    return (\n      <div id=\"main-wrapper\">\n        <header>Arcade.Clothes</header>\n        \n        <div>\n          <input type=\"text\" id=\"form-control\" placeholder='Введите кодовое слово' onInput={()=>{ checkWord() }}/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}